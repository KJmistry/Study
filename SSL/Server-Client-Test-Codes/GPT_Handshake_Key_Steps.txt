 
Key Steps in TLS 1.3 Handshake:
ClientHello: The client sends a message proposing cryptographic algorithms and session parameters.

ServerHello: The server responds with the selected parameters, including the cipher suite, session ID, and server's random value.

Key Exchange: In TLS 1.3, the key exchange process is streamlined. Instead of explicitly sending the session key (as in older versions like TLS 1.2), the client and server perform a shared secret exchange (usually with elliptic curve Diffie-Hellman or similar protocols). Here's how:

The client generates a pre-master secret and encrypts it using the server's public key (which was provided in the server's certificate).
The server uses its private key to decrypt the pre-master secret, and both the client and server independently derive the same session keys (encryption and MAC keys) from the shared secret and other parameters.
Finished Messages:

Both the client and the server send a Finished message, which is a hash of all the handshake messages up until that point. This ensures integrity and confirms that both sides are using the same session keys.
Change Cipher Spec: After the key exchange and finishing messages, both the client and the server send a Change Cipher Spec message, indicating that they are switching to the newly agreed-upon session keys to encrypt further communication.

Application Data: After the Change Cipher Spec message, both sides can begin to exchange Application Data using the session keys.

Why Application Data Appears Immediately After the ServerHello:
In TLS 1.3, Application Data can indeed appear right after the ServerHello (and the following messages like Server Finished and Change Cipher Spec), but this does not imply that the session is insecure.

Early Data (0-RTT): One key feature of TLS 1.3 is the possibility of sending 0-RTT data, or early data, immediately after the handshake begins (in some cases, even before the handshake completes). This data is sent by the client and can be encrypted with a key derived from previous sessions (if session resumption or a pre-shared key is used).

In the case you are looking at, if the client and server had a previous session or use session resumption, the client might send early application data (such as part of a request) after receiving the ServerHello.
Normal Flow: If early data is not used, the server should only begin to send application data after both the client and server have completed the handshake (including Change Cipher Spec and Finished messages). This would mean application data would only appear after these handshake steps, with encryption using the session keys.

In Your PCAP:
It looks like Application Data is appearing very quickly, which could be a sign of one of two things:

Early Data (0-RTT): The client might be sending early data that was encrypted with a key derived from a previous session or pre-shared keys, allowing it to start sending encrypted application data almost immediately.
Normal Data: If the session is completely fresh and early data is not being used, the Change Cipher Spec and Finished messages might be coming very soon after the ServerHello, but your capture could be showing the sequence as fragmented. So, depending on the packet timing and how the PCAP was captured, you might be seeing Application Data records sent after the handshake and key exchange are completed.
Summary:
TLS 1.3 allows 0-RTT data, meaning the client might send encrypted application data after the ServerHello even before the full handshake completes (if session resumption or early data is used).
If it's a fresh connection without early data, then the Change Cipher Spec and Finished messages should occur before the Application Data starts, ensuring that communication is fully encrypted with the newly derived keys.
If youâ€™re unsure whether this is early data or standard application data, you might want to check if the server supports 0-RTT or if session resumption is involved.
